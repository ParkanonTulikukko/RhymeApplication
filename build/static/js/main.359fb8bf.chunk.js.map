{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["vowel_list","diphthong_list","getRhymeBody","str","x","length","includes","charAt","substring","allConsonants","letter","levenshteinDistance","str1","str2","track","Array","fill","map","i","j","indicator","Math","min","App","useState","words","setWords","rhymingWords","setRhymingWords","inputWord","setInputWord","syllableCount","setSyllableCount","rhymingSyllableCount","setRhymingSyllableCount","rhymeType","setRhymeType","sorting","setSorting","useEffect","wordlist","findRhymes","sort","sortedWords","console","log","word1","word2","word","localeCompare","separateLastSyllable","subWord","syllable","nextLetter","precedingText","lastSyllable","precedingLetter","handleRhymeTypeChange","e","target","value","inputWordSyllables","inputWordTemp","compareSyllables","compareFirstSyllables","fullRhymeSyllablesCompairer","inputWordSyllable","wordSyllable","fullRhymeFirstSyllableCompairer","vocalRhymeSyllableCompairer","findVocals","syllableCountNumeric","rhymingSyllableCountNumeric","unshift","temp","doesRhyme","count","syllables","wordTemp","filter","vocalAndFullRhymes","fullRhymes","checkFiltersAndExecuteSearch","className","type","onChange","onClick","id","checked","htmlFor","defaultValue","parseInt","disabled","_id","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.359fb8bf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as wordlist from './wordlist.json';\nimport logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useEffect } from 'react'\nimport { getAll } from './services'\n\nconst vowel_list = 'aeiouyäöAEIOUYÄÖ'\nconst diphthong_list = [\"ai\", \"ei\", \"oi\", \"äi\", \"öi\", \"ey\", \"äy\", \"öy\", \n  \"au\", \"eu\", \"ou\", \"ui\", \"yi\", \"iu\", \"iy\", \"ie\", \"uo\", \"yö\"]\n\nfunction getRhymeBody(str) {\n  for(var x = 0; x < str.length ; x++) {\n    if (vowel_list.includes(str.charAt(x))) {\n      return str.substring(x, (str.length))\n      }\n    }\n  return \"\"  \n  }\n\n//function to check if the string includes only consonants\nfunction allConsonants(str) {\n  for (var letter of str) {\n    if (vowel_list.includes(letter))\n      return false\n    }\n  return true\n  }    \n\nconst levenshteinDistance = (str1 = '', str2 = '') => {\n  const track = Array(str2.length + 1).fill(null).map(() =>\n  Array(str1.length + 1).fill(null));\n  for (let i = 0; i <= str1.length; i += 1) {\n      track[0][i] = i;\n  }\n  for (let j = 0; j <= str2.length; j += 1) {\n      track[j][0] = j;\n  }\n  for (let j = 1; j <= str2.length; j += 1) {\n      for (let i = 1; i <= str1.length; i += 1) {\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        track[j][i] = Math.min(\n            track[j][i - 1] + 1, // deletion\n            track[j - 1][i] + 1, // insertion\n            track[j - 1][i - 1] + indicator, // substitution\n        );\n      }\n  }\n  return track[str2.length][str1.length];\n}  \n\nfunction App() {\n\n  const [ words, setWords] = useState([])\n  const [ rhymingWords, setRhymingWords] = useState([])\n  const [ inputWord, setInputWord ] = useState('')\n  const [ vocalRhymesAllowed, setVocalRhymesChecked] = useState(true)\n  const [ syllableCount, setSyllableCount] = useState(\"same\")\n  const [ rhymingSyllableCount, setRhymingSyllableCount ] = useState(\"wholeSearchWord\")\n  const [ rhymeType, setRhymeType ] = useState(\"allRhyme\")\n  const [ sorting, setSorting ] = useState(\"similarity\")\n\n  useEffect(() => {\n    //console.log(\"tiedostosta...\")\n    //console.log(wordlist['default'])\n    setWords(wordlist['default'])\n    /*\n    getAll().then(words => {\n      console.log(\"databasesta...\")\n      console.log(words)\n      setWords(words)\n      })\n    */  \n    }, [])\n\n  useEffect(() => { \n    findRhymes()\n    }, [syllableCount, rhymingSyllableCount])  \n\n  useEffect(() => {\n    setRhymingWords(sort(rhymingWords)) \n    }, [sorting])   \n\n  const sort = (rhymingWords) => {\n    let sortedWords = []\n    console.log(\"SORTATAAN\")\n    if (sorting === \"alphabetical\") {\n      sortedWords = [...rhymingWords].sort((word1, word2) => word1.word.localeCompare(word2.word))  \n      }\n    else if (sorting === \"similarity\") {\n      sortedWords = [...rhymingWords].sort((word1, word2) => {\n        return levenshteinDistance(word1.word, inputWord) - levenshteinDistance(word2.word, inputWord)\n        })\n      }      \n    return sortedWords  \n    }\n\n  //Function to get the last syllable of the word (or part of the word)\n  const separateLastSyllable = (subWord) => {\n    let syllable = \"\"\n    let nextLetter = \"\"\n    while (subWord.length > 0) {\n      let letter = subWord[subWord.length-1]\n      subWord = subWord.substring(0, subWord.length-1)\n      syllable = letter + syllable\n      //If the letter was the first one in the word, it must be the first one of the syllable\n      if (subWord.length === 0) {\n        return {\n          precedingText: \"\",\n          lastSyllable: syllable \n          }\n        }\n      //console.log(\"kirjain on: \" + letter)\n      //console.log(\"tavu on: \" + syllable)\n      let precedingLetter = subWord[subWord.length-1]  \n      //if the letter is a vocal\n      if (vowel_list.includes(letter)) {\n        //if the preceding letter is a vocal\n        if (vowel_list.includes(precedingLetter)) {\n          //if the letters side by side dont form a diphtong\n          //and are not the same vocal\n          if ((!diphthong_list.includes(precedingLetter + letter)) && precedingLetter !== letter){\n            //the letter is the first letter of the last syllable\n            return {\n              precedingText: subWord,\n              lastSyllable: syllable \n              }\n            }//if\n          }//if\n        }//if\n      //the letter is a consonant  \n      else {\n        //if the next letter is a vocal \n        //and the letter is not part of the first consonant cluster of the word\n        if (vowel_list.includes(nextLetter) && (!allConsonants(subWord)) && nextLetter !== \"\") {\n          //the letter is the first letter of the last syllable\n          return {\n            precedingText: subWord,\n            lastSyllable: syllable \n            }  \n          }//if\n        }//else\n      //The letter was not the first one of the syllable    \n      nextLetter = letter\n      }//while\n    }   \n\n  const changeSyllableCount = (e) => {\n    if (e.target.value === \"same\")   \n      setSyllableCount(e.target.value)\n    else  \n      setSyllableCount(parseInt(e.target.value))\n    }  \n\n  const changeRhymingSyllableCount = (e) => {\n    if (e.target.value === \"wholeSearchWord\")\n      setRhymingSyllableCount(e.target.value)\n    else    \n      setRhymingSyllableCount(parseInt(e.target.value))\n    }  \n\n  const handleVocalRhymesChange = () => {\n    console.log(\"vokal ryhmesiin laitetaa: \" + !vocalRhymesAllowed)\n    setVocalRhymesChecked(!vocalRhymesAllowed)\n    } \n\n  const handleRhymeTypeChange = (e) => {\n    setRhymeType(e.target.value)\n    }  \n\n  const handleTextInput = (e) => {\n    setInputWord(e.target.value)\n    }  \n\n  const changeSorting = (e) => {\n    setSorting(e.target.value)\n    }  \n\n  //find rhyming matches for the input word  \n  const findRhymes = () => { \n    console.log(\"ETI RIIMEJÄ\")\n    let inputWordSyllables = []\n    let inputWordTemp = inputWord\n    var compareSyllables = function () {}\n    var compareFirstSyllables = function () {} \n    var fullRhymeSyllablesCompairer = function (inputWordSyllable, wordSyllable) {\n      return inputWordSyllable === wordSyllable  \n      }\n    var fullRhymeFirstSyllableCompairer = function (inputWordSyllable, wordSyllable) {\n      return getRhymeBody(inputWordSyllable) === getRhymeBody(wordSyllable)  \n      }    \n    var vocalRhymeSyllableCompairer = function (inputWordSyllable, wordSyllable) {\n      return findVocals(inputWordSyllable) === findVocals(wordSyllable)  \n      }  \n\n    //we have to make another variable to reflect the value in the \n    //syllable drop down menu, because the \"same\" option means\n    //the syllables are restricted according the search word.\n    //But for startes, we just copy the value. \n    let syllableCountNumeric = syllableCount\n    //The case is the same for this variable\n    let rhymingSyllableCountNumeric = rhymingSyllableCount\n    \n    //the search word must be separated in to syllables so it can be \n    //compared to the result words\n    while (inputWordTemp !== \"\") {\n      let {precedingText, lastSyllable} = separateLastSyllable(inputWordTemp)\n      inputWordSyllables.unshift(lastSyllable)\n      inputWordTemp = precedingText\n      }\n  \n    //while syllableCount variable can have string as a value (\"same\")\n    //syllableCountNumeric must have only numeric ones...  \n    if (syllableCountNumeric === \"same\")\n      syllableCountNumeric = inputWordSyllables.length\n\n    //...and the case is the same with this one\n    if (rhymingSyllableCountNumeric  === \"wholeSearchWord\")\n      rhymingSyllableCountNumeric = inputWordSyllables.length\n\n    //Checks that the search filters makes sense. If that's not the case, \n    //we set rhymingWords empty.\n\n    const checkFiltersAndExecuteSearch = () => {\n      if (rhymingSyllableCountNumeric <= syllableCountNumeric &&\n        rhymingSyllableCountNumeric <= inputWordSyllables.length) {\n\n        if (rhymeType === \"fullRhyme\") {\n          //if the word should be a full rhyme, \n          //every syllable after the first one should match \n          compareSyllables = fullRhymeSyllablesCompairer\n          compareFirstSyllables = fullRhymeFirstSyllableCompairer\n          return words.filter(doesRhyme)  \n          }\n    \n        else if (rhymeType === \"vocalRhyme\") {\n          //if the world should be a vocal rhyme,\n          //the vocals of each syllable should match\n          compareSyllables = vocalRhymeSyllableCompairer\n          compareFirstSyllables = vocalRhymeSyllableCompairer\n          //this FUNCTIONS will accept full rhymes too,\n          //so they must be filtered out afterwards\n          var vocalAndFullRhymes = words.filter(doesRhyme)\n    \n          //lets find the full rhymes...\n          compareSyllables = fullRhymeSyllablesCompairer\n          compareFirstSyllables = fullRhymeFirstSyllableCompairer\n          var fullRhymes = words.filter(doesRhyme)\n          \n          //...and then substract all the full rhymes\n          var substraction = vocalAndFullRhymes.filter(word => !fullRhymes.includes(word))\n          return substraction \n          }\n    \n        //ALL RHYMES \n        else {\n          compareSyllables = function (inputWordSyllable, wordSyllable) {\n            return findVocals(inputWordSyllable) === findVocals(wordSyllable)  \n            }\n          compareFirstSyllables = compareSyllables   \n          console.log(\"aal rhymes\")\n          console.log(words.filter(doesRhyme))\n          return words.filter(doesRhyme)\n          }\n        }//if\n      else // ...the search filters are in conflict \n        return [] \n      }//checkFiltersAndExecuteSearch  \n\n    setRhymingWords(sort(checkFiltersAndExecuteSearch()))\n    //sort()  \n\n    function findVocals (syllable) {\n      var temp = \"\"\n      for (var letter of syllable) {\n        if (vowel_list.includes(letter)) {\n          temp = temp + letter\n          }    \n        }//for\n      return temp  \n      }//findVocals\n\n    function doesRhyme(word) {      \n\n      let count = 0\n      let syllables = [] \n      let wordTemp = word.word\n      //console.log(wordTemp)\n\n      //if the word is exactly same as the search word we return false\n      if (inputWord === word.word) \n        return false\n\n      while (wordTemp !== \"\") {\n        count++\n        let {precedingText, lastSyllable} = separateLastSyllable(wordTemp)\n        wordTemp = precedingText\n        syllables.unshift(lastSyllable)\n\n        /*SYLLABLE COUNT RESTRICTIONS*/\n        /*****************************/\n        if (count > syllableCountNumeric) \n          return false\n        if (precedingText === \"\" && count < syllableCountNumeric)\n          return false   \n        \n        /*RHYMING SYLLABLE COUNT RESTRICTIONS*/\n        /*************************************/  \n        if (count < rhymingSyllableCountNumeric) {\n          //the syllables must rhyme (in a way or another) \n          if (!compareSyllables(inputWordSyllables[inputWordSyllables.length-count], syllables[0])) \n            return false   \n          }//if  \n        else if (count === rhymingSyllableCountNumeric) {\n          let inputWordSyllable = inputWordSyllables[inputWordSyllables.length-count]\n          let wordSyllable = syllables[0]\n          //If we are looking for a full rhyme, the rhyme body of the first rhyming syllable\n          //must be exactly same. With non-full rhyme, we compare each syllable in the same way. \n          if (!compareFirstSyllables(inputWordSyllable, wordSyllable)) \n            return false \n          }//else if\n\n        }//while\n      return true    \n      }//doesRhyme  \n    }//findRhymes  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <input type=\"text\" value={inputWord} onChange={handleTextInput}></input>&nbsp;\n          <button type=\"button\" onClick={findRhymes}>Hae riimit</button><br/> \n          <form>\n            <input type=\"radio\" value=\"allRhyme\" id=\"allRhyme\" checked={rhymeType === \"allRhyme\"}\n              onChange={handleRhymeTypeChange}\n              />\n            <label htmlFor=\"allRhyme\">kaikki riimit</label>\n            <input type=\"radio\" value=\"fullRhyme\" id=\"fullRhyme\" checked={rhymeType === \"fullRhyme\"} \n              onChange={handleRhymeTypeChange} \n              />\n            <label htmlFor=\"perfectRhyme\">puhtaat riimit</label>\n            <input type=\"radio\" value=\"vocalRhyme\" id=\"vocalRhyme\" checked={rhymeType === \"vocalRhyme\"} \n              onChange={handleRhymeTypeChange}\n              />\n            <label htmlFor=\"vocalRhyme\">ei-puhtaat riimit</label><br/>\n          </form>\n          <label htmlFor=\"syllables\">Sanassa tavuja</label>\n          <select \n            id=\"syllableCount\" \n            value={syllableCount} \n            defaultValue={syllableCount}\n            onChange={changeSyllableCount}\n            >\n            <option value=\"same\">kuten hakusanassa</option>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n          </select>&nbsp;\n          <label htmlFor=\"rhymingSyllables\">Rimmaavia tavuja</label>\n          <select \n            id=\"syllables\"\n            value={rhymingSyllableCount}\n            defaultValue={rhymingSyllableCount}\n            onChange={changeRhymingSyllableCount}\n            >\n            <option value=\"wholeSearchWord\">koko hakusana</option>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n          </select><br/> \n          <label htmlFor=\"sort\">Lajittele</label>&nbsp;\n          <select \n            id=\"sorting\" \n            value={sorting} \n            defaultValue={sorting}\n            onChange={changeSorting}\n            >\n            <option value=\"alphabetical\">aakkosjärjestys</option>\n            <option value=\"similarity\">samankaltaisuus</option>\n            <option value=\"popularity\" disabled>suosituimmat</option>\n          </select>         \n        </p>\n        {rhymingWords.map(word =>\n          <h2 key={word._id}>{word.word}</h2>\n          )}\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}